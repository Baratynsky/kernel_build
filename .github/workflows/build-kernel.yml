name: Build MikaKernel


on:
  workflow_dispatch:


jobs:
  build-kernel:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          
          - name: Download AOSP Clang
            if: env.USE_CUSTOM_CLANG != 'true' && env.USE_CUSTOM_GCC != 'true' && env.ENABLE_GCC_AOSP != 'true'
            run: |
              cd $GITHUB_WORKSPACE/kernel_workspace
              mkdir clang
              wget -nv https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
              tar -C clang/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz

           - name: Download Custom Clang
             if: env.USE_CUSTOM_CLANG == 'true' && env.USE_CUSTOM_GCC != 'true' && env.ENABLE_GCC_AOSP != 'true'
             run: |
               cd $GITHUB_WORKSPACE/kernel_workspace
               if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
               wget -nv -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
               mkdir clang
               tar -C clang/ -zxvf clang.tar.gz
             elif [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.xz' ]]; then
               wget -nv -O clang.tar.xz ${{ env.CUSTOM_CLANG_SOURCE }}
               mkdir clang
               tar -C clang/ -Jxvf clang.tar.xz
             elif [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.git' ]]; then
             git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang --depth=1
             else
               wget -nv -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
               mkdir clang
               unzip clang.zip -d clang/
          fi
          if [[ "$(find ./clang -mindepth 1  -maxdepth 1 -type d | wc -l)" == "1" ]]; then
            mv -f "$(find ./clang -mindepth 1  -maxdepth 1 -type d)"/* ./clang
          fi

          - name: Download GCC AOSP
            if: env.ENABLE_GCC_AOSP == 'true' && env.USE_CUSTOM_GCC != 'true' && env.USE_CUSTOM_CLANG != 'true'
            run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ ${{ env.ENABLE_GCC_ARM64 }} = true ]; then
            mkdir gcc-64
            wget -nv -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
          fi

          if [ ${{ env.ENABLE_GCC_ARM32 }} = true ]; then
            mkdir gcc-32
            wget -nv -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-32/ -zxvf gcc-arm.tar.gz
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV
          fi

          - name: Download Custom GCC
            if: env.USE_CUSTOM_GCC == 'true' && env.ENABLE_GCC_AOSP != 'true' && env.USE_CUSTOM_CLANG != 'true'
            run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ ${{ env.USE_CUSTOM_GCC_64 }} = true ]; then
            if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.gz' ]]; then
                wget -nv -O gcc-64.tar.gz ${{ env.CUSTOM_GCC_64_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -zxvf gcc-64.tar.gz
            elif [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.xz' ]]; then
                wget -nv -O gcc-64.xz ${{ env.CUSTOM_GCC_64_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -Jxvf gcc-64.xz
            elif [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.git' ]]; then
                git clone ${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} gcc-64 --depth=1
            else
                wget -nv -O gcc-64.zip ${{ env.CUSTOM_GCC_64_SOURCE }}
                mkdir gcc-64
                unzip gcc-64.zip -d gcc-64/
            fi
            if [[ "$(find ./gcc-64 -mindepth 1  -maxdepth 1 -type d | wc -l)" == "1" ]]; then
                mv -f "$(find ./gcc-64 -mindepth 1  -maxdepth 1 -type d)"/* ./gcc-64
            fi
          fi
          if [ ${{ env.USE_CUSTOM_GCC_32 }} = true ]; then
            if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.gz' ]]; then
                wget -nv -O gcc-32.tar.gz ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                tar -C gcc-32/ -zxvf gcc-32.tar.gz
            elif [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.xz' ]]; then
                wget -nv -O gcc-32.xz ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                tar -C gcc-32/ -Jxvf gcc-32.xz
            elif [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.git' ]]; then
                git clone ${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} gcc-32 --depth=1
            else
                wget -nv -O gcc-32.zip ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                unzip gcc-32.zip -d gcc-32/
            fi
            if [[ "$(find ./gcc-32 -mindepth 1  -maxdepth 1 -type d | wc -l)" == "1" ]]; then
                mv -f "$(find ./gcc-32 -mindepth 1  -maxdepth 1 -type d)"/* ./gcc-32
            fi
          fi
      
      - name: Pull kernel source
        run: |
          git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source

      - name: Build kernel
        run: |
          export KBUILD_BUILD_USER="zclkkk"
          export KBUILD_BUILD_HOST="workspace"
          export PATH=$GITHUB_WORKSPACE/clang/bin:${PATH}
          args="                  ARCH=arm64 \
                                  CC=clang \
                                  O=../out \
                                  ${{ env.BUILD_ARGS }} \
                                  CROSS_COMPILE=aarch64-linux-gnu- \
                                  CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
                                  LD=ld.lld \
                                  NM=llvm-nm \
                                  OBJCOPY=llvm-objcopy "
          cd kernel-source
          make ${args} ${{ env.KERNEL_CONFIG }}
          make -j$(($(getconf _NPROCESSORS_ONLN) * 2)) ${args}

      - name: Package kernel
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: output_kernel
          path: AnyKernel3/*
